name: 部署 Vector Log Hub

on: 
  # 支持通过 API 或其他工作流触发
  workflow_dispatch:
    inputs:
      reason:
        description: '部署原因'
        required: false
        default: '手动触发部署'
      branch:
        description: '目标分支'
        required: false
        default: ''  # 默认为空，将使用当前分支
  
  # 在main分支提交时自动部署
  push:
    branches: [ main ]

jobs:
  validate:
    name: 验证配置文件
    runs-on: [self-hosted, rk3588]
    outputs:
      commit_sha: ${{ steps.set_commit_sha.outputs.commit_sha }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}  # 使用提供的分支或当前分支

      - name: 打印分支信息
        run: |
          echo "当前分支: $(git branch --show-current)"
          echo "提交 ID: $(git rev-parse HEAD)"
          echo "提交信息: $(git log -1 --pretty=%B)"

      - name: 验证 Vector 配置
        run: |
          echo "验证 Vector 配置文件..."
          docker run --rm \
            -v $(pwd)/config/vector.yaml:/etc/vector/vector.yaml:ro \
            timberio/vector:0.47.0-debian \
            vector validate /etc/vector/vector.yaml

      - name: 验证 Grafana 配置
        run: |
          echo "验证 Grafana 配置文件..."
          # 检查所有必需的配置文件是否存在
          test -f config/grafana.ini || { echo "错误: grafana.ini 不存在"; exit 1; }
          test -f config/grafana/provisioning/datasources/datasources.yml || { echo "错误: datasources.yml 不存在"; exit 1; }
          test -f config/grafana/provisioning/dashboards/dashboards.yml || { echo "错误: dashboards.yml 不存在"; exit 1; }
          test -f config/grafana/dashboards/vector-log-hub.json || { echo "错误: vector-log-hub.json 不存在"; exit 1; }
          echo "所有 Grafana 配置文件验证通过"

      # 设置提交SHA作为job输出
      - name: 设置提交SHA为输出
        id: set_commit_sha
        run: echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  deploy:
    name: 部署 Vector Log Hub
    needs: validate
    runs-on: [self-hosted, rk3588]
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}  # 使用提供的分支或当前分支

      - name: 部署 Vector Log Hub
        run: |
          echo "部署 Vector Log Hub..."
          
          # 停止现有服务（如果存在）
          echo "停止现有服务..."
          docker-compose -f docker-compose.yml down || true
          
          # 创建必要的目录
          echo "创建必要的目录..."
          sudo mkdir -p /opt/vector-log-hub/logs
          sudo mkdir -p /opt/vector-log-hub/grafana
          sudo chmod -R 777 /opt/vector-log-hub
          
          # 创建logs目录（如果不存在）
          mkdir -p logs
          
          # 创建Docker网络（如果不存在）
          echo "创建Docker网络..."
          docker network inspect logging-networking >/dev/null 2>&1 || \
            docker network create --driver bridge logging-networking
          
          # 拉取最新镜像
          echo "拉取最新镜像..."
          docker pull timberio/vector:0.47.0-debian
          docker pull grafana/grafana:10.2.0
          
          # 启动服务
          echo "启动 Vector Log Hub 服务..."
          docker-compose -f docker-compose.yml up -d
          
          echo "Vector Log Hub 已部署"

      - name: 验证部署
        run: |
          # 等待服务启动
          echo "等待服务启动..."
          sleep 10
          
          # 检查容器状态
          echo "检查容器状态..."
          docker-compose -f docker-compose.yml ps
          
          # 验证 Vector 服务
          echo "验证 Vector 服务..."
          timeout 60 bash -c 'until curl -f http://localhost:8686/health; do echo "等待 Vector API..."; sleep 2; done' || {
            echo "错误: Vector API 未响应"
            docker-compose -f docker-compose.yml logs vector
            exit 1
          }
          
          # 验证 Grafana 服务
          echo "验证 Grafana 服务..."
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do echo "等待 Grafana API..."; sleep 2; done' || {
            echo "错误: Grafana API 未响应"
            docker-compose -f docker-compose.yml logs grafana
            exit 1
          }
          
          # 检查端口
          echo "检查服务端口..."
          nc -z localhost 9000 && echo "Vector TCP 输入端口已开放" || { echo "错误: Vector TCP 输入端口未开放"; exit 1; }
          nc -z localhost 8686 && echo "Vector API 端口已开放" || { echo "错误: Vector API 端口未开放"; exit 1; }
          nc -z localhost 9090 && echo "Vector Prometheus 端口已开放" || { echo "错误: Vector Prometheus 端口未开放"; exit 1; }
          nc -z localhost 3000 && echo "Grafana 端口已开放" || { echo "错误: Grafana 端口未开放"; exit 1; }

      - name: 测试日志接收
        run: |
          echo "测试日志接收功能..."
          
          # 发送测试日志
          echo '{"timestamp":"2024-01-01T12:00:00Z","level":"info","service":"deployment-test","message":"Vector Log Hub deployment test","context":{"operation_id":"deploy-test-123","duration_ms":100}}' | \
            nc localhost 9000
          
          # 等待日志处理
          sleep 3
          
          # 检查日志文件
          if ls logs/app-*.log 1> /dev/null 2>&1; then
            echo "日志文件已创建:"
            ls -la logs/app-*.log
            echo "日志内容:"
            cat logs/app-*.log | tail -5
          else
            echo "警告: 未找到日志文件"
          fi

      - name: 显示服务状态
        run: |
          echo "=== 服务状态 ==="
          docker-compose -f docker-compose.yml ps
          
          echo "=== Vector 容器日志 ==="
          docker-compose -f docker-compose.yml logs --tail 10 vector
          
          echo "=== Grafana 容器日志 ==="
          docker-compose -f docker-compose.yml logs --tail 10 grafana

  # 部署结果通知
  notify:
    needs: deploy
    if: always()
    runs-on: [self-hosted, rk3588]
    steps:
      - name: 部署结果通知
        run: |
          echo "Vector Log Hub 部署任务完成"
          echo "执行时间: $(date)"
          echo "触发方式: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "触发原因: ${{ github.event.inputs.reason }}"
            echo "目标分支: ${{ github.event.inputs.branch || github.ref_name }}"
          fi
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "Vector Log Hub 部署成功！"
            echo "提交 SHA: ${{ needs.validate.outputs.commit_sha }}"
            echo "服务访问地址:"
            echo "  - Vector API: http://localhost:8686"
            echo "  - Vector TCP 输入: localhost:9000"
            echo "  - Vector Prometheus: http://localhost:9090"
            echo "  - Grafana: http://localhost:3000 (admin/admin)"
            echo "网络: logging-networking"
          else
            echo "Vector Log Hub 部署失败，请检查日志"
          fi